#!/bin/bash

# Ensure the script is being run as root
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root."
   exit 1
fi

echo "Starting ultimate Linux security hardening..."

# Function to check and install packages
install_package() {
    if ! dpkg -l | grep -q "^ii\s\+$1"; then
        echo "Installing $1..."
        apt install -y "$1"
    else
        echo "$1 is already installed."
    fi
}

# Function to set sysctl parameters
set_sysctl_param() {
    param=$1
    value=$2
    if grep -q "^${param}" /etc/sysctl.conf; then
        sed -i "s/^${param}.*/${param} = ${value}/" /etc/sysctl.conf
    else
        echo "${param} = ${value}" >> /etc/sysctl.conf
    fi
}

# Update the system and upgrade packages
echo "Updating the system and cleaning up..."
apt update && apt upgrade -y && apt dist-upgrade -y
apt autoremove -y && apt autoclean -y

# Set up comprehensive logging
echo "Setting up comprehensive logging with rsyslog and auditd..."
install_package rsyslog
install_package auditd audispd-plugins
systemctl enable rsyslog auditd
systemctl start rsyslog auditd
cat <<EOL > /etc/audit/rules.d/audit.rules
-w /etc/passwd -p wa -k passwd_changes
-w /etc/shadow -p wa -k shadow_changes
-w /etc/group -p wa -k group_changes
-w /etc/gshadow -p wa -k gshadow_changes
-w /var/log/auth.log -p wa -k auth_logs
-w /var/log/syslog -p wa -k syslog_changes
EOL
service auditd restart

# Enable and configure the UFW firewall
echo "Enabling and configuring UFW firewall..."
install_package ufw
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow http
ufw allow https
ufw --force enable

# Harden SSH configuration
echo "Hardening SSH configuration..."
install_package openssh-server
sed -i 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
sed -i 's/#X11Forwarding yes/X11Forwarding no/' /etc/ssh/sshd_config
sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/' /etc/ssh/sshd_config
sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 300/' /etc/ssh/sshd_config
sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 0/' /etc/ssh/sshd_config
sed -i 's/#MaxAuthTries 6/MaxAuthTries 3/' /etc/ssh/sshd_config
echo "AllowGroups sshusers" >> /etc/ssh/sshd_config
systemctl reload sshd

# Install and configure Fail2Ban for SSH protection
echo "Installing and configuring Fail2Ban for SSH protection..."
install_package fail2ban
cat <<EOL > /etc/fail2ban/jail.local
[sshd]
enabled = true
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
findtime = 600
EOL
systemctl enable fail2ban
systemctl start fail2ban

# Configure automatic security updates
echo "Configuring automatic security updates..."
install_package unattended-upgrades
dpkg-reconfigure -plow unattended-upgrades
sed -i 's,//Unattended-Upgrade::Mail "root";,Unattended-Upgrade::Mail "root";,g' /etc/apt/apt.conf.d/50unattended-upgrades

# Restrict permissions on sensitive files
echo "Restricting permissions on sensitive files..."
chmod 600 /etc/ssh/sshd_config /boot/grub/grub.cfg /etc/passwd /etc/shadow /etc/gshadow /etc/fstab

# Disable and mask unused services
echo "Disabling and masking unused services..."
services_to_disable=(cups-browsed avahi-daemon bluetooth)
for service in "${services_to_disable[@]}"; do
    systemctl disable --now $service.service
    systemctl mask $service.service
done

# Enable AppArmor for mandatory access control
echo "Enabling AppArmor for mandatory access control..."
install_package apparmor apparmor-utils
aa-enforce /etc/apparmor.d/*

# Install and configure AIDE for file integrity monitoring
echo "Installing and configuring AIDE for file integrity monitoring..."
install_package aide
aideinit
mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
echo "0 5 * * * root /usr/bin/aide.wrapper --config /etc/aide/aide.conf --check" >> /etc/crontab

# Harden kernel parameters and network settings
echo "Hardening kernel parameters and network settings..."
set_sysctl_param "kernel.randomize_va_space" "2"
set_sysctl_param "kernel.exec-shield" "1"
set_sysctl_param "kernel.kptr_restrict" "2"
set_sysctl_param "fs.protected_hardlinks" "1"
set_sysctl_param "fs.protected_symlinks" "1"
set_sysctl_param "net.ipv4.conf.all.rp_filter" "1"
set_sysctl_param "net.ipv4.conf.default.rp_filter" "1"
set_sysctl_param "net.ipv4.conf.all.log_martians" "1"
set_sysctl_param "net.ipv4.conf.default.log_martians" "1"
set_sysctl_param "net.ipv4.conf.all.accept_source_route" "0"
set_sysctl_param "net.ipv4.conf.default.accept_source_route" "0"
set_sysctl_param "net.ipv4.conf.all.accept_redirects" "0"
set_sysctl_param "net.ipv4.conf.default.accept_redirects" "0"
set_sysctl_param "net.ipv4.conf.all.secure_redirects" "0"
set_sysctl_param "net.ipv4.conf.default.secure_redirects" "0"
set_sysctl_param "net.ipv4.tcp_rfc1337" "1"
set_sysctl_param "net.ipv4.icmp_ignore_bogus_error_responses" "1"
sysctl -p

# Implement IP tables rules to add an additional layer of security
echo "Setting up IP tables for extra protection..."
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Save IP tables rules
iptables-save > /etc/iptables/rules.v4
echo "IP tables rules configured and saved."

# Configure systemd service limits
echo "Configuring systemd service limits..."
echo "DefaultLimitNOFILE=65536" >> /etc/systemd/system.conf
echo "DefaultLimitNPROC=65536" >> /etc/systemd/system.conf
echo "DefaultLimitCORE=0" >> /etc/systemd/system.conf
systemctl daemon-reload

# Secure shared memory and disable core dumps
echo "Securing shared memory and disabling core dumps..."
echo "tmpfs /run/shm tmpfs defaults,noexec,nosuid,nodev 0 0" >> /etc/fstab
mount -o remount /run/shm
echo "* hard core 0" >> /etc/security/limits.conf
set_sysctl_param "fs.suid_dumpable" "0"

# Harden system logging with syslog-ng
echo "Harden system logging with syslog-ng..."
install_package syslog-ng
systemctl enable syslog-ng
systemctl start syslog-ng

# Install and configure ClamAV for malware scanning
echo "Installing and configuring ClamAV for malware scanning..."
install_package clamav clamav-daemon
systemctl stop clamav-freshclam
freshclam
systemctl start clamav-freshclam
systemctl enable clamav-daemon
clamscan -r -i --remove --exclude-dir="^/sys" --exclude-dir="^/proc" /

# Restrict cron jobs to authorized users only
echo "Restricting cron jobs to authorized users only..."
echo "root" > /etc/cron.allow
chmod 600 /etc/cron.allow
chmod 600 /etc/at.allow

# End of the script
echo "Ultimate security hardening complete. Please review the system's settings for additional security measures."
