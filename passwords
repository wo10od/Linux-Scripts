#!/bin/bash

# Check if the script is run with "su -"
read -p "Have you run 'su -'? (y/n): " su_check
if [ "$su_check" != "y" ]; then
    echo "Please run 'su -' before executing this script."
    exit 1
fi

# Function to generate a secure password
generate_password() {
    local password_length=16
    password=$(openssl rand -base64 $password_length)
    echo $password
}

# Enforce strict password policies in /etc/login.defs
echo "Hardening password policies..."
sudo sed -i 's/PASS_MAX_DAYS.*/PASS_MAX_DAYS   30/' /etc/login.defs
sudo sed -i 's/PASS_MIN_DAYS.*/PASS_MIN_DAYS   1/' /etc/login.defs
sudo sed -i 's/PASS_MIN_LEN.*/PASS_MIN_LEN   16/' /etc/login.defs
sudo sed -i 's/PASS_WARN_AGE.*/PASS_WARN_AGE   7/' /etc/login.defs

# Enforce password complexity in /etc/security/pwquality.conf
echo "minlen = 16" | sudo tee -a /etc/security/pwquality.conf
echo "dcredit = -3" | sudo tee -a /etc/security/pwquality.conf
echo "ucredit = -3" | sudo tee -a /etc/security/pwquality.conf
echo "lcredit = -3" | sudo tee -a /etc/security/pwquality.conf
echo "ocredit = -2" | sudo tee -a /etc/security/pwquality.conf

# Update passwords for users who don't meet the policy
while IFS=: read -r username _; do
    if [ "$username" != "root" ] && [ "$username" != "nobody" ]; then
        echo "Checking password for user: $username"
        if ! sudo chage -l "$username" | grep -q "Password expires"; then
            secure_password=$(generate_password)
            echo "Updating password for $username to meet policy."
            echo "$username:$secure_password" | sudo chpasswd
        fi
    fi
done < /etc/passwd

echo "Password policy hardened. Users not meeting requirements had their passwords updated."
