#!/bin/bash
#this file is used to edit config files on linux 
#shh 

# Backup the existing SSH configuration
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak

# Overwrite sshd_config with a hardened configuration
cat <<EOF > /etc/ssh/sshd_config
# Basic settings
Port 22                # Change this to a non-standard port (e.g., 2222) for security through obscurity
Protocol 2             # Enforces SSH version 2 for better security
AddressFamily inet     # Restrict to IPv4 (use 'any' for both IPv4 and IPv6)

# Key authentication
PermitRootLogin no     # Disable root login over SSH
PasswordAuthentication no  # Disable password-based authentication
PubkeyAuthentication yes   # Use key-based authentication only
AuthorizedKeysFile .ssh/authorized_keys  # Location of authorized keys

# Security options
PermitEmptyPasswords no   # Disallow empty passwords
MaxAuthTries 3            # Limit authentication attempts to prevent brute-force attacks
LoginGraceTime 1m         # Time allowed for successful authentication
AllowTcpForwarding no     # Disable TCP forwarding unless required
X11Forwarding no          # Disable X11 forwarding
UseDNS no                 # Speed up connections by skipping DNS lookups
Compression no            # Avoid compression to reduce attack surface

# Logging and monitoring
LogLevel VERBOSE          # Use verbose logging for troubleshooting
SyslogFacility AUTHPRIV   # Logs SSH messages to authpriv facility
MaxStartups 10:30:60      # Throttles unauthenticated connections: 10 allowed, then 30% chance of refusal up to 60


# Key exchange and ciphers
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
Ciphers aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512,hmac-sha2-256

# Idle session timeout
ClientAliveInterval 300   # Sends a keepalive message every 300 seconds
ClientAliveCountMax 0     # Disconnects client if no response

# Additional hardening
PermitUserEnvironment no  # Prevents users from changing environment variables
AllowAgentForwarding no   # Prevent agent forwarding
HostbasedAuthentication no # Disallow host-based authentication
ChallengeResponseAuthentication no # Disable challenge-response authentication
EOF

# Test the SSH configuration
if sshd -t; then
    echo "SSHD configuration test passed. Restarting sshd..."
    systemctl restart sshd
    echo "SSHD restarted successfully."
else
    echo "SSHD configuration test failed. Restoring the original configuration..."
    cp /etc/ssh/sshd_config.bak /etc/ssh/sshd_config
    systemctl restart sshd
    exit 1
fi

# Variables
HOST_CONF="/etc/host.conf"
BACKUP_CONF="/etc/host.conf.bak"

echo "Starting configuration of /etc/host.conf..."

# Step 1: Backup the existing file
if [[ -f $HOST_CONF ]]; then
    echo "Backing up existing host.conf to $BACKUP_CONF..."
    cp $HOST_CONF $BACKUP_CONF
    if [[ $? -eq 0 ]]; then
        echo "Backup successful."
    else
        echo "Failed to back up the existing configuration. Exiting."
        exit 1
    fi
else
    echo "No existing host.conf file found. Proceeding to create a new one."
fi

# Step 2: Apply the new configuration
echo "Writing new configuration to $HOST_CONF..."
cat <<EOF > $HOST_CONF
order bind,hosts
nospoof on
EOF

if [[ $? -eq 0 ]]; then
    echo "New configuration applied successfully."
else
    echo "Failed to write the new configuration. Exiting."
    exit 1
fi

# Step 3: Verify the new configuration
echo "Verification: Current contents of $HOST_CONF:"
cat $HOST_CONF

# Completion message
echo "Configuration process completed successfully!"

# Define files and their correct permissions
declare -A file_permissions=(
    ["/etc/shadow"]="600"
    ["/etc/passwd"]="644"
    ["/etc/group"]="644"
    ["/etc/gshadow"]="600"
)

echo "Checking and fixing file permissions..."

# Iterate over the files and apply correct permissions
for file in "${!file_permissions[@]}"; do
    if [[ -e $file ]]; then
        correct_perm="${file_permissions[$file]}"
        current_perm=$(stat -c "%a" "$file")
        
        if [[ $current_perm != $correct_perm ]]; then
            echo "Fixing permissions for $file: Current=$current_perm, Expected=$correct_perm"
            chmod "$correct_perm" "$file"
            if [[ $? -eq 0 ]]; then
                echo "Permissions for $file set to $correct_perm successfully."
            else
                echo "Failed to set permissions for $file."
            fi
        else
            echo "Permissions for $file are already correct ($current_perm)."
        fi
    else
        echo "File $file does not exist. Skipping."
    fi
done

echo "File permission check and fix completed."

echo copy at /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
